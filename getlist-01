import requests
from requests.auth import HTTPBasicAuth
import urllib3
import socket

import os
socket.getaddrinfo = lambda *args, **kwargs: [(socket.AF_INET, socket.SOCK_STREAM, 6, '', (args[0], args[1] if len(args) > 1 else 0))]

# === Disable SSL Warnings ===
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === Configuration ===

# --- Cloud Azure DevOps ---
cloud_org = "CloudSteer"
cloud_user_email = "user@domain.com"
cloud_pat = "your-cloud-pat"

# --- On-Prem Azure DevOps ---
onprem_base_url = "https://ado.global.test.com"
onprem_project_path = "sc-ado-ga-op/a2676d24-f5cf-423f-9277-e18efla2c8la"
onprem_api = f"{onprem_base_url}/{onprem_project_path}/_api_identity_/readsvopeApplicationGroupJson?__v=5"
onprem_pat = "your-onprem-pat"

# --- Auth Setup ---
cloud_auth = HTTPBasicAuth("", cloud_pat)
onprem_auth = HTTPBasicAuth("", onprem_pat)

# --- Proxy only for on-prem ---
onprem_proxies = {
    "http": "http://proxy.company.com:8080",
    "https": "http://proxy.company.com:8080"
}

# Optional: Bypass proxy for internal DNS
os.environ["NO_PROXY"] = "ado.global.test.com"

# --- Common Headers ---
headers = {"Content-Type": "application/json"}

# === Step 1: Get Cloud User Descriptor ===
print(f"üîç Fetching user descriptor for: {cloud_user_email}")
identity_url = f"https://vssps.dev.azure.com/{cloud_org}/_apis/identities?searchFilter=General&filterValue={cloud_user_email}&queryMembership=Direct&api-version=7.1"

try:
    resp = requests.get(identity_url, headers=headers, auth=cloud_auth, verify=False)
except requests.exceptions.RequestException as e:
    print("‚ùå Error connecting to Azure DevOps Cloud.")
    print(e)
    exit()

if resp.status_code != 200:
    print(f"‚ùå Failed to fetch user identity: {resp.status_code}")
    exit()

identity_data = resp.json()
if identity_data["count"] == 0:
    print("‚ùå No user found.")
    exit()

user_descriptor = identity_data["value"][0]["descriptor"]
member_of = identity_data["value"][0].get("memberOf", [])

print(f"\nüë§ User is member of {len(member_of)} cloud groups.")
cloud_group_names = []

# === Step 2: Get Cloud Group Names ===
for group_descriptor in member_of:
    group_url = f"https://vssps.dev.azure.com/{cloud_org}/_apis/identities/{group_descriptor}?api-version=7.1"
    try:
        group_resp = requests.get(group_url, headers=headers, auth=cloud_auth, verify=False)
    except Exception as e:
        print(f"‚ö†Ô∏è Failed to get group for {group_descriptor}: {e}")
        continue

    if group_resp.status_code == 200:
        group_name = group_resp.json().get("providerDisplayName", "Unknown")
        cloud_group_names.append(group_name)
        print(f"‚úîÔ∏è {group_name}")
    else:
        print(f"‚ö†Ô∏è Error fetching group name: {group_resp.status_code}")

# === Step 3: Get On-Prem Groups ===
print("\nüì° Fetching on-prem groups...")
try:
    onprem_resp = requests.get(onprem_api, headers=headers, auth=onprem_auth, verify=False, proxies=onprem_proxies)
except requests.exceptions.RequestException as e:
    print("‚ùå Error connecting to Azure DevOps Server.")
    print(e)
    exit()

if onprem_resp.status_code != 200:
    print(f"‚ùå Failed to fetch on-prem groups: {onprem_resp.status_code}")
    exit()

onprem_groups = onprem_resp.json().get("Identities", [])
print(f"‚úÖ Retrieved {len(onprem_groups)} on-prem groups.")

# === Step 4: Match Cloud Groups with On-Prem ===
print("\nüîó Matching cloud groups to on-prem...\n")
matched = []

for cloud_group in cloud_group_names:
    match = next((g for g in onprem_groups if g.get("FriendlyDisplayName", "").lower() == cloud_group.lower()), None)
    if match:
        print(f"‚úÖ Matched: {cloud_group} ‚Üí {match['Descriptor']}")
        matched.append({
            "name": cloud_group,
            "onprem_descriptor": match["Descriptor"],
            "onprem_id": match["TeamFoundationId"]
        })
    else:
        print(f"‚ùå No match for: {cloud_group}")

# === Step 5: Final Summary ===
print("\nüìã Final Mapped Groups:")
for m in matched:
    print(f"- {m['name']} ‚Üí {m['onprem_descriptor']}")
